class ConsoleDaemon: public SimpleThread {
private:
	int mPortNo;
	int mServerSocket;
	int mConsoleLogLevel;
	TCommandItem *mCurrentGroup;
	TCommandItem *mCommandItems;
	char *mLastUsedCmdGroup;

	int initConsoleDaemon();
	void waitClientConnection();
	void doCommunicate(int client, int server);
	void logSystem(const int loglevel, const int client, const char *format, ...);

	TCommandItem* findGroupItem(TCommandItem *commandItems, const char *find_str);
	TCommandItem* insertCommandItem(TCommandItem *commandItems, TCommandItem *item);
	TCommandItem* makeCommandItem(const char *cmdGroup, const char *cmdName, const char *cmdHelp, fnLogConsoleCallBack func);
	void displayCommandGroup(const int client, TCommandItem *cmdItem, const char *cmd);
	TCommandItem* findCommandItem(TCommandItem *baseItems, const char *cmdName);

public:

	ConsoleDaemon(const int portNo = 6001);
	void processRecvCommand(const int client, const char *command);
	int changeGroup(const int client, const char *group);

	int run();

	static ConsoleDaemon* getInstance();

	int appendCommandItem(const char *cmdGroup, const char *cmdName, const char *cmdHelp, fnLogConsoleCallBack func);
	void logArgs(const char *file, const int line, const int loglevel, const int client, const char *format, ...);
	void logArgv(const char *file, const int line, const int loglevel, const int client, const char *format, va_list ap);
	int printCommandHelp(const int client, const char *cmd);
	void runSystemCommand(const int client, const char *cmd);
	void enableParameters(const int client, const int argc, const char **argv);
};

#define RCVBUFSIZE 512   /* Size of receive buffer */

#define SNDBUFSIZE 512

#define CMDLEN_GROUP    32
#define CMDLEN_NAME     32
#define CMDLEN_HELP     128

char *strstrip(const char *string, const char *chars) {
	char *newstr = (char*) malloc(strlen(string) + 1);
	int counter = 0;

	for (; *string; string++) {
		if (!strchr(chars, *string)) {
			newstr[counter] = *string;
			++counter;
		}
	}

	newstr[counter] = 0;
	return newstr;
}

int _printCommandHelp(const int client, const int argc, const char **argv) {
	ConsoleDaemon *Console = ConsoleDaemon::getInstance();

	Console->printCommandHelp(client, NULL);

	return 0;
}

int _changeCommandGroup(const int client, const int argc, const char **argv) {
	LogConsole::ConsoleDaemon *Console = LogConsole::ConsoleDaemon::getInstance();

	if (argc < 1)
		return -1;

	Console->changeGroup(client, argv[0]);

	return 0;
}

int _changeConsoleParameters(const int client, const int argc, const char **argv) {
	LogConsole::ConsoleDaemon *Console = LogConsole::ConsoleDaemon::getInstance();

	Console->enableParameters(client, argc, argv);
	return 0;
}

ConsoleDaemon::ConsoleDaemon(const int portNo) {
	mPortNo = portNo;

	printf("Console Daemon.....\n");
	mCommandItems = NULL;
	mCurrentGroup = NULL;
	mLastUsedCmdGroup = NULL;

	mConsoleLogLevel = LOG_LEVEL_ALL;

	initConsoleDaemon();

	appendCommandItem("/", "help", "Print out all command functions", _printCommandHelp);
	appendCommandItem("/", "cd", "Change command group", _changeCommandGroup);
	appendCommandItem("/", "enable", "Enable Console parameters", _changeConsoleParameters);

}

int ConsoleDaemon::run() {
	waitClientConnection();

	return 0;
}

ConsoleDaemon* ConsoleDaemon::getInstance() {
	static ConsoleDaemon *_consoleInstance = NULL;
	if (_consoleInstance == NULL) {
		_consoleInstance = new ConsoleDaemon();
		_consoleInstance->start();
	}

	return _consoleInstance;
}

int ConsoleDaemon::initConsoleDaemon() {
	struct sockaddr_in servAddr;

	mServerSocket = socket(PF_INET, SOCK_STREAM, IPPROTO_TCP);
	if (mServerSocket < 0) {
		// fail to init socket
		std::cout << "Error : Socket Initial Fail..." << std::endl;
		return -1;
	}

	memset(&servAddr, 0, sizeof(servAddr));
	servAddr.sin_family = AF_INET;
	servAddr.sin_addr.s_addr = htonl(INADDR_ANY);
	servAddr.sin_port = htons(mPortNo);
	if (bind(mServerSocket, (struct sockaddr *) &servAddr, sizeof(servAddr)) < 0) {
		std::cout << "Error : Socket Binding Fail..." << std::endl;
		return -1;
	}

	if (listen(mServerSocket, MAXPENDING) < 0) {
		std::cout << "Fail to Listen in Server Side..." << std::endl;
		return -1;
	}

	logSystem(LOG_LEVEL_DBG, -1, "Telnet Console daemon is now running with port 6001\n");

	return 0;
}

void ConsoleDaemon::waitClientConnection() {
	struct sockaddr_in clieAddr;
	int clieLen;
	int clieSocket;

	while (1) {
		std::cout << "Waiting Connection" << std::endl;
		clieLen = sizeof(clieAddr);
		clieSocket = accept(mServerSocket, (struct sockaddr *) &clieAddr, (socklen_t*) &clieLen);
		if (clieSocket < 0) {
			std::cout << "Error : Fail to connect client..." << std::endl;
			return;
		}

		std::cout << "Connected from " << inet_ntoa(clieAddr.sin_addr) << std::endl;

		// force telnet character mode -
		// send(clieSocket, "\377\375\042\377\373\001", 6, 0);
		// if you allow multiple connection, just contains below function in SimpleThread
		doCommunicate(clieSocket, mServerSocket);
	}

	std::cout << "Finish Waiting Client" << std::endl;
}

void ConsoleDaemon::logSystem(const int loglevel, const int client, const char *format, ...) {
	va_list ap;

	va_start(ap, format);
	logArgv(NULL, 0, loglevel, client, format, ap);
	va_end(ap);
}
void ConsoleDaemon::logArgs(const char *file, const int line, const int loglevel, const int client, const char *format, ...) {
	va_list ap;

	va_start(ap, format);
	logArgv(file, line, loglevel, client, format, ap);
	va_end(ap);
}

#include <utils/Log.h>
#include "pli_log.h"
void ConsoleDaemon::logArgv(const char *file, const int line, const int loglevel, const int client, const char *format,
		va_list ap) {
	char buf[SNDBUFSIZE];
	char fileline[128];
	int written;

	if (file == NULL || line == 0) {
		*fileline = 0;
	} else {
		snprintf(fileline, 128, "%s:%d", file, line);
		fileline[127] = 0;
	}

	written = vsnprintf(buf, SNDBUFSIZE, format, ap);

	switch (loglevel) {
	case LOG_LEVEL_ERR:
		pl_log_err(fileline, buf);
		break;
	case LOG_LEVEL_WRN:
		pl_log_wrn(fileline, buf);
		break;
	case LOG_LEVEL_MSG:
		pl_log_msg(fileline, buf);
		break;
	case LOG_LEVEL_DBG:
		pl_log_dbg(fileline, buf);
		break;
	default:
		pl_log_dbg(fileline, buf);
		break;
	}

	if (client != -1 && (loglevel & mConsoleLogLevel)) {
		send(client, fileline, strlen(fileline) + 1, 0);
		send(client, buf, written + 1, 0);
	}
}

void ConsoleDaemon::doCommunicate(int client, int server) {
	char echoBuffer[RCVBUFSIZE], *pos;
	int recvMsgSize;

	do {
		logSystem(LOG_LEVEL_DBG, client, COLOR_YELLOW "taurus:%s$ " COLOR_RESET, mCurrentGroup->cmdGroup);
		recvMsgSize = recv(client, echoBuffer, RCVBUFSIZE, 0);
		echoBuffer[recvMsgSize] = 0;

		if ((pos = strchr(echoBuffer, 0x0d)) != NULL)
			*pos = '\0';
		if ((pos = strchr(echoBuffer, 0x0a)) != NULL)
			*pos = '\0';

		consoleUtils::hex_dump(echoBuffer, recvMsgSize, std::cout);

		processRecvCommand(client, echoBuffer);
	} while (recvMsgSize > 0);

	close(client); /* Close client socket */
}

TCommandItem* ConsoleDaemon::findGroupItem(TCommandItem *commandItems, const char *find_str) {
	TCommandItem *cur;

	cur = commandItems;
	while (cur) {
		if (strcmp(find_str, cur->cmdGroup) == 0)
			return cur;
		cur = cur->next;
	}

	return cur;
}

TCommandItem* ConsoleDaemon::insertCommandItem(TCommandItem *commandItems, TCommandItem *item) {
	if (commandItems == NULL) {
		commandItems = item;
	} else {
		commandItems->prev = item;
		item->next = commandItems;
	}

	return item;
}

TCommandItem* ConsoleDaemon::makeCommandItem(const char *cmdGroup, const char *cmdName, const char *cmdHelp,
		fnLogConsoleCallBack func) {
	TCommandItem *cmdItem;

	cmdItem = (TCommandItem*) calloc(1, sizeof(TCommandItem));

	cmdItem->cmdGroup = strdup(cmdGroup);
	if (cmdName)
		cmdItem->cmdName = strdup(cmdName);
	if (cmdHelp)
		cmdItem->cmdHelp = strdup(cmdHelp);

	cmdItem->pfnCmdFunc = func;

	return cmdItem;
}

// Support 1-Depth Command Line.
int ConsoleDaemon::appendCommandItem(const char *cmdGroup, const char *cmdName, const char *cmdHelp, fnLogConsoleCallBack func) {
	TCommandItem *cmdItem, *groupCmdItem;

	if (cmdGroup == NULL)
		cmdGroup = mLastUsedCmdGroup;
	if (func == NULL || cmdName == NULL || cmdGroup == NULL) {
		// TODO : Add Error Message
		return -1;
	}

	cmdItem = makeCommandItem(cmdGroup, cmdName, cmdHelp, func);

	mLastUsedCmdGroup = cmdItem->cmdGroup;
	groupCmdItem = findGroupItem(mCommandItems, cmdItem->cmdGroup);
	if (groupCmdItem == NULL) {
		groupCmdItem = makeCommandItem(cmdGroup, NULL, NULL, NULL);
		mCommandItems = insertCommandItem(mCommandItems, groupCmdItem);
	}

	groupCmdItem->children = insertCommandItem(groupCmdItem->children, cmdItem);

	if (mCurrentGroup == NULL)
		mCurrentGroup = groupCmdItem;

	return 0;
}

int ConsoleDaemon::changeGroup(const int client, const char *group) {
	TCommandItem *cmdItem;

	cmdItem = findGroupItem(mCommandItems, group);
	if (cmdItem == NULL) {
		return -1;
	}
	mCurrentGroup = cmdItem;

	return 0;
}

void ConsoleDaemon::enableParameters(const int client, const int argc, const char **argv) {
	logSystem(LOG_LEVEL_SYS, client, "!!!!! Under construct....\n");
}

void ConsoleDaemon::displayCommandGroup(const int client, TCommandItem *cmdItem, const char *cmd) {
	TCommandItem *child;

	logSystem(LOG_LEVEL_DBG, client, "Group - [%s%s%s]\n", COLOR_CYAN, cmdItem->cmdGroup, COLOR_RESET);
	child = cmdItem->children;
	while (child) {
		if (cmd == NULL) {
			logSystem(LOG_LEVEL_DBG, client, "%s%16s%s : %s\n", COLOR_YELLOW, child->cmdName, COLOR_RESET, child->cmdHelp);
		} else {
			if (strncmp(child->cmdName, cmd, strlen(cmd)) == 0)
				logSystem(LOG_LEVEL_DBG, client, "%s%16s%s : %s\n",
				COLOR_YELLOW, child->cmdName, COLOR_RESET, child->cmdHelp);
		}

		child = child->next;
	}
}

int ConsoleDaemon::printCommandHelp(const int client, const char *cmd = NULL) {
	TCommandItem *cmdItem;

	// Display '/' group items      // Root Group will be existed in mCommandItems's final.
	cmdItem = mCommandItems;
	while (cmdItem) {
		displayCommandGroup(client, cmdItem, cmd);
		cmdItem = cmdItem->next;
	}
	cmdItem = mCommandItems;

	return 0;
}

#define MAXARGS_NUM         20
// command = "command arg1 arg2 arg3 ..."
void ConsoleDaemon::processRecvCommand(const int client, const char *command) {
	TCommandItem *cmdItem;
	int argc;
	char *argv[MAXARGS_NUM], *str;

	char *temp;
	char *cmd, *args, *tok;

	if (strlen(command) == 0)
		return;

	temp = strdup(command);
	cmd = strtok_r(temp, " ,", &args);

	argc = 0;
	while ((tok = strtok_r(NULL, " ,", &args)))
		argv[argc++] = tok;

	cmdItem = findCommandItem(mCurrentGroup, cmd);
	if (cmdItem) {
		if (cmdItem->pfnCmdFunc)
			cmdItem->pfnCmdFunc(client, argc, (const char**) argv);
		free(temp);

		return;
	} else {
		//  Search in full command....
		TCommandItem *baseItem = mCommandItems;

		while (baseItem) {
			cmdItem = findCommandItem(baseItem, cmd);
			if (cmdItem) {
				if (cmdItem->pfnCmdFunc)
					cmdItem->pfnCmdFunc(client, argc, (const char**) argv);
				free(temp);

				return;
			}
			baseItem = baseItem->next;
		}
	}

	logSystem(LOG_LEVEL_DBG, client, "[ERR] Can't find command name [%s]\n", cmd);
	// if you want to display similar command list, please unblock below
	//logArgs(client, "List of command which is matched with [%s]\n", cmd);
	//printCommandHelp(client, cmd);
	//  if command is not existed in dictionary, try to run it in system
	runSystemCommand(client, command);
	free(temp);
}

void ConsoleDaemon::runSystemCommand(const int client, const char *cmd) {
	FILE *fp;
	char buf[512];

	fp = popen(cmd, "r");
	if (fp == NULL) {
		logSystem(LOG_LEVEL_DBG, client, "[ERR] Fail to run command - [%s]", cmd);
		return;
	}
	while (fgets(buf, sizeof(buf) - 1, fp) != NULL)
		logSystem(LOG_LEVEL_DBG, client, "%s", buf);
	pclose(fp);
}

TCommandItem* ConsoleDaemon::findCommandItem(TCommandItem *baseItems, const char *cmdName) {
	TCommandItem *cmdItem = baseItems->children;
	while (cmdItem) {
		if (strcmp(cmdItem->cmdName, cmdName) == 0)
			return cmdItem;
		cmdItem = cmdItem->next;
	}

	return NULL;
}

int appendCommandItem(const char *cmdGroup, const char *cmdName, const char *cmdHelp, fnLogConsoleCallBack func) {
	return LogConsole::ConsoleDaemon::getInstance()->appendCommandItem(cmdGroup, cmdName, cmdHelp, func);
}

int printConsoleLog(const char *file, const int line, const int logLevel, const char *format, ...) {
	va_list ap;

	va_start(ap, format);
	LogConsole::ConsoleDaemon::getInstance()->logArgv(file, line, logLevel, -1, format, ap);
	va_end(ap);

	return 0;
}

